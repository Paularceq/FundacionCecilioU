@model Web.Models.Volunteer.AddHoursViewModel

@{
    ViewData["Title"] = Model.IsEditing ? "Editar Registro de Horas" : "Registrar Horas de Voluntariado";
    Layout = "~/Views/Shared/_DashboardLayout.cshtml";
}

@section Styles {
    <style>
        body {
            background-color: #e3e6eb;
        }

        .form-card {
            border-radius: 12px;
            box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);
            background-color: #ffffff;
            padding: 2rem;
            margin-bottom: 2rem;
        }

        .time-input {
            font-size: 1.1rem;
            padding: 0.75rem;
        }

        .hours-display {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            border-radius: 10px;
            padding: 1rem;
            text-align: center;
            margin: 1rem 0;
        }

        .validation-summary-errors {
            background-color: #f8d7da;
            border: 1px solid #f5c6cb;
            border-radius: 8px;
            padding: 1rem;
            margin-bottom: 1rem;
        }

            .validation-summary-errors ul {
                margin: 0;
                padding-left: 1.5rem;
            }

        .preview-card {
            background: #f8f9fa;
            border-radius: 8px;
            padding: 1rem;
            margin-top: 1rem;
        }

        .btn-primary {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            border: none;
            padding: 0.75rem 2rem;
            font-weight: 600;
        }

        .btn-secondary {
            background: #6c757d;
            border: none;
            padding: 0.75rem 2rem;
        }

        .hours-summary {
            background: linear-gradient(135deg, #28a745 0%, #20c997 100%);
            color: white;
            border-radius: 10px;
            padding: 1rem;
            text-align: center;
            margin-bottom: 1rem;
        }

        .hours-invalid {
            background: linear-gradient(135deg, #dc3545 0%, #e74c3c 100%) !important;
        }

        .hours-warning {
            background: linear-gradient(135deg, #ffc107 0%, #fd7e14 100%) !important;
        }
    </style>
}

<div class="container">
    <!-- Header -->
    <div class="mb-4">
        <div class="d-flex justify-content-between align-items-center">
            <h1 class="h3 fw-bold text-primary">
                <i class="fas fa-clock me-2"></i>
                @(Model.IsEditing ? "Editar Registro de Horas" : "Registrar Horas de Voluntariado")
            </h1>
            <a asp-action="ManageHours" asp-route-requestId="@Model.RequestId" class="btn btn-outline-secondary">
                <i class="fas fa-arrow-left me-2"></i> Volver
            </a>
        </div>
    </div>

    <!-- Validation Summary -->
    @if (!ViewData.ModelState.IsValid)
    {
        <div class="validation-summary-errors">
            <h6><i class="fas fa-exclamation-triangle me-2"></i>Por favor corrija los siguientes errores:</h6>
            <ul>
                @foreach (var error in ViewData.ModelState.Values.SelectMany(v => v.Errors))
                {
                    <li>@error.ErrorMessage</li>
                }
            </ul>
        </div>
    }

    <!-- Formulario -->
    <div class="form-card">
        @using (Html.BeginForm(Model.IsEditing ? "EditHours" : "AddHours", "VolunteerRequest", FormMethod.Post, new { @class = "needs-validation", novalidate = "novalidate" }))
        {
            @Html.AntiForgeryToken()
            @Html.HiddenFor(m => m.RequestId)
            @if (Model.IsEditing)
            {
                @Html.HiddenFor(m => m.Id)
            }

            <div class="row">
                <!-- Fecha -->
                <div class="col-md-6 mb-3">
                    <label asp-for="Date" class="form-label fw-semibold">
                        <i class="fas fa-calendar me-2 text-primary"></i>Fecha de trabajo
                    </label>
                    @Html.EditorFor(m => m.Date, new { htmlAttributes = new { @class = "form-control", @required = "required" } })
                    @Html.ValidationMessageFor(m => m.Date, "", new { @class = "text-danger small" })
                    <div class="form-text">Solo puedes registrar fechas hasta hoy</div>
                </div>

                <!-- Horas totales (calculado) -->
                <div class="col-md-6 mb-3">
                    <div class="hours-display" id="hoursDisplay">
                        <h5 class="mb-0">
                            <i class="fas fa-stopwatch me-2"></i>
                            <span id="totalHours">@Model.TotalHoursFormatted</span>
                        </h5>
                        <small>Total de horas</small>
                    </div>
                </div>
            </div>

            <div class="row">
                <!-- Hora de inicio -->
                <div class="col-md-6 mb-3">
                    <label asp-for="StartTime" class="form-label fw-semibold">
                        <i class="fas fa-play me-2 text-success"></i>Hora de inicio
                    </label>
                    @Html.EditorFor(m => m.StartTime, new { htmlAttributes = new { @class = "form-control time-input", @type = "time", @required = "required" } })
                    @Html.ValidationMessageFor(m => m.StartTime, "", new { @class = "text-danger small" })
                    <div class="form-text">Entre 6:00 AM y 10:00 PM</div>
                </div>

                <!-- Hora de fin -->
                <div class="col-md-6 mb-3">
                    <label asp-for="EndTime" class="form-label fw-semibold">
                        <i class="fas fa-stop me-2 text-danger"></i>Hora de fin
                    </label>
                    @Html.EditorFor(m => m.EndTime, new { htmlAttributes = new { @class = "form-control time-input", @type = "time", @required = "required" } })
                    @Html.ValidationMessageFor(m => m.EndTime, "", new { @class = "text-danger small" })
                    <div class="form-text">Máximo 8 horas por día</div>
                </div>
            </div>

            <!-- Descripción de actividades -->
            <div class="mb-3">
                <label asp-for="ActivitiesDescription" class="form-label fw-semibold">
                    <i class="fas fa-tasks me-2 text-info"></i>Actividades realizadas
                </label>
                @Html.TextAreaFor(m => m.ActivitiesDescription, new { @class = "form-control", @rows = "5", @placeholder = "Describe detalladamente las actividades que realizaste durante tu jornada de voluntariado...", @required = "required", @maxlength = "1000" })
                @Html.ValidationMessageFor(m => m.ActivitiesDescription, "", new { @class = "text-danger small" })
                <div class="d-flex justify-content-between">
                    <div class="form-text">Describe qué hiciste, cómo ayudaste, qué lograste</div>
                    <div class="form-text">
                        <span id="activitiesCounter">0</span>/1000 caracteres
                    </div>
                </div>
            </div>

            <!-- Notas adicionales -->
            <div class="mb-4">
                <label asp-for="Notes" class="form-label fw-semibold">
                    <i class="fas fa-sticky-note me-2 text-warning"></i>Notas adicionales (opcional)
                </label>
                @Html.TextAreaFor(m => m.Notes, new { @class = "form-control", @rows = "3", @placeholder = "Observaciones, comentarios, reflexiones sobre tu experiencia...", @maxlength = "500" })
                @Html.ValidationMessageFor(m => m.Notes, "", new { @class = "text-danger small" })
                <div class="d-flex justify-content-between">
                    <div class="form-text">Información adicional que consideres relevante</div>
                    <div class="form-text">
                        <span id="notesCounter">0</span>/500 caracteres
                    </div>
                </div>
            </div>

            <!-- Preview Card -->
            <div class="preview-card" id="previewCard" style="display: none;">
                <h6><i class="fas fa-eye me-2"></i>Vista previa</h6>
                <div id="previewContent"></div>
            </div>

            <!-- Botones -->
            <div class="d-flex gap-3 justify-content-end">
                <a asp-action="ManageHours" asp-route-requestId="@Model.RequestId" class="btn btn-secondary">
                    <i class="fas fa-times me-2"></i>Cancelar
                </a>
                <button type="button" class="btn btn-info" onclick="showPreview()">
                    <i class="fas fa-eye me-2"></i>Vista previa
                </button>
                <button type="submit" class="btn btn-primary" id="submitBtn">
                    <i class="fas fa-save me-2"></i>
                    @(Model.IsEditing ? "Actualizar Registro" : "Registrar Horas")
                </button>
            </div>
        }
    </div>

    <!-- Información de ayuda -->
    <div class="form-card">
        <h6><i class="fas fa-info-circle me-2 text-info"></i>Reglas importantes</h6>
        <div class="row">
            <div class="col-md-6">
                <ul class="list-unstyled">
                    <li><i class="fas fa-check text-success me-2"></i>Máximo 8 horas por día</li>
                    <li><i class="fas fa-check text-success me-2"></i>Mínimo 1 hora por registro</li>
                    <li><i class="fas fa-check text-success me-2"></i>Horarios entre 6:00 AM y 10:00 PM</li>
                    <li><i class="fas fa-check text-success me-2"></i>Solo un registro por día</li>
                </ul>
            </div>
            <div class="col-md-6">
                <ul class="list-unstyled">
                    <li><i class="fas fa-clock text-warning me-2"></i>No registrar fechas futuras</li>
                    <li><i class="fas fa-clock text-warning me-2"></i>Máximo 30 días hacia atrás</li>
                    <li><i class="fas fa-hourglass-half text-info me-2"></i>Horas quedan pendientes de aprobación</li>
                    <li><i class="fas fa-lock text-secondary me-2"></i>No se pueden editar una vez aprobadas</li>
                </ul>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            const startTimeInput = document.getElementById('StartTime');
            const endTimeInput = document.getElementById('EndTime');
            const activitiesTextarea = document.getElementById('ActivitiesDescription');
            const notesTextarea = document.getElementById('Notes');
            const submitBtn = document.getElementById('submitBtn');
            const dateInput = document.getElementById('Date');

            // Actualizar contador de caracteres
            function updateCharCounter(textarea, counterId) {
                const counter = document.getElementById(counterId);
                if (counter && textarea) {
                    const currentLength = textarea.value.length;
                    counter.textContent = currentLength;

                    // Cambiar color según proximidad al límite
                    const maxLength = textarea.getAttribute('maxlength') || 1000;
                    if (currentLength > maxLength * 0.9) {
                        counter.className = 'text-danger';
                    } else if (currentLength > maxLength * 0.8) {
                        counter.className = 'text-warning';
                    } else {
                        counter.className = 'text-muted';
                    }
                }
            }

            // Calcular y mostrar total de horas
            function updateTotalHours() {
                const startTime = startTimeInput.value;
                const endTime = endTimeInput.value;

                if (startTime && endTime) {
                    const start = new Date('1970-01-01T' + startTime + ':00');
                    const end = new Date('1970-01-01T' + endTime + ':00');

                    if (end > start) {
                        const diffMs = end - start;
                        const diffHours = diffMs / (1000 * 60 * 60);

                        document.getElementById('totalHours').textContent = diffHours.toFixed(1) + ' horas';

                        // Validación visual
                        const hoursDisplay = document.getElementById('hoursDisplay');
                        hoursDisplay.classList.remove('hours-invalid', 'hours-warning');

                        if (diffHours > 8) {
                            hoursDisplay.classList.add('hours-invalid');
                        } else if (diffHours < 1) {
                            hoursDisplay.classList.add('hours-warning');
                        }

                        // Validar horarios laborales
                        const startHour = start.getHours();
                        const endHour = end.getHours();

                        if (startHour < 6 || endHour > 22) {
                            hoursDisplay.classList.add('hours-warning');
                        }

                    } else {
                        document.getElementById('totalHours').textContent = '0.0 horas';
                        document.getElementById('hoursDisplay').classList.add('hours-invalid');
                    }
                }
            }

            // Validar fecha
            function validateDate() {
                const selectedDate = new Date(dateInput.value);
                const today = new Date();
                const thirtyDaysAgo = new Date();
                thirtyDaysAgo.setDate(today.getDate() - 30);

                if (selectedDate > today) {
                    showValidationMessage('No puedes registrar horas para fechas futuras', 'warning');
                    return false;
                }

                if (selectedDate < thirtyDaysAgo) {
                    showValidationMessage('No puedes registrar horas para fechas anteriores a 30 días', 'warning');
                    return false;
                }

                return true;
            }

            // Mostrar mensaje de validación
            function showValidationMessage(message, type) {
                // Remover mensajes previos
                const existingAlert = document.querySelector('.validation-alert');
                if (existingAlert) {
                    existingAlert.remove();
                }

                // Crear nuevo mensaje
                const alertDiv = document.createElement('div');
                alertDiv.className = `alert alert-${type} alert-dismissible fade show validation-alert`;
                alertDiv.innerHTML = `
                    <i class="fas fa-exclamation-triangle me-2"></i>${message}
                    <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
                `;

                // Insertar antes del formulario
                const formCard = document.querySelector('.form-card');
                formCard.insertBefore(alertDiv, formCard.firstChild);

                // Auto-remover después de 5 segundos
                setTimeout(() => {
                    if (alertDiv.parentNode) {
                        alertDiv.remove();
                    }
                }, 5000);
            }

            // Event listeners
            startTimeInput.addEventListener('change', updateTotalHours);
            endTimeInput.addEventListener('change', updateTotalHours);
            dateInput.addEventListener('change', validateDate);

            activitiesTextarea.addEventListener('input', function() {
                updateCharCounter(this, 'activitiesCounter');
            });

            notesTextarea.addEventListener('input', function() {
                updateCharCounter(this, 'notesCounter');
            });

            // Inicializar contadores y cálculos
            updateCharCounter(activitiesTextarea, 'activitiesCounter');
            updateCharCounter(notesTextarea, 'notesCounter');
            updateTotalHours();

            // Validación del formulario antes de enviar
            document.querySelector('form').addEventListener('submit', function(e) {
                if (!validateDate()) {
                    e.preventDefault();
                    return false;
                }

                const activities = activitiesTextarea.value.trim();
                if (!activities || activities.length < 20) {
                    showValidationMessage('La descripción de actividades debe tener al menos 20 caracteres', 'danger');
                    e.preventDefault();
                    return false;
                }

                // Deshabilitar botón para evitar doble envío
                submitBtn.disabled = true;
                submitBtn.innerHTML = '<i class="fas fa-spinner fa-spin me-2"></i>Guardando...';
            });
        });

        function showPreview() {
            const previewCard = document.getElementById('previewCard');
            const previewContent = document.getElementById('previewContent');

            const date = document.getElementById('Date').value;
            const startTime = document.getElementById('StartTime').value;
            const endTime = document.getElementById('EndTime').value;
            const activities = document.getElementById('ActivitiesDescription').value;
            const notes = document.getElementById('Notes').value;

            previewContent.innerHTML = `
                <div class="row">
                    <div class="col-md-6">
                        <strong>Fecha:</strong> ${new Date(date).toLocaleDateString('es-ES')}<br>
                        <strong>Horario:</strong> ${startTime} - ${endTime}<br>
                    </div>
                    <div class="col-md-6">
                        <strong>Total horas:</strong> ${document.getElementById('totalHours').textContent}
                    </div>
                </div>
                <div class="mt-2">
                    <strong>Actividades:</strong><br>
                    <p class="mb-1">${activities || 'No especificadas'}</p>
                </div>
                ${notes ? `<div class="mt-2"><strong>Notas:</strong><br><p class="mb-0">${notes}</p></div>` : ''}
            `;

            previewCard.style.display = 'block';
            previewCard.scrollIntoView({ behavior: 'smooth' });
        }
    </script>
}

